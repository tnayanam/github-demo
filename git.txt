https://www.udemy.com/git-started-with-github/learn/v4/t/lecture/2965913?start=0
// Flow when repo is already created
------------------------------------------------------------------------------------------
1. install git bash
2. in bash "git version" command will tell you which git version got installed
3. in browser create a new repository in git hub website.
4. in bash, you will be at the home location  but if you want to create local copy in a separate directory
  - mkdir directoryname
  - pwd (it tells about present working directory)
  - cd directoryname
 Now you will be at the current folder/location 
5. now set the username and email
 -git config --global user.name "Tanuj Nayanam"
 -git config --global user.email "tnayanam@syr.edu"
 check if its added properly
  -git config --global --list
  it should show the user and email set up.
  
  Copy of our own repository from git hub website to local system - this is also called as CLONING a repository. (for exaple repo name is: git-demo)
   go to online and copy the repo clone address
   in bash type 
   - git clone theaddressofonlinerepo
   now this will create the local repo in system
   - ls shows the content in the pwd
   - cd git-demo
   - ls
   - now here we will see just the readme file because thats what we created and is available on the github server.online as of now. if we had more file it will start showing now.. 
   
 Which branch currently you are working on?
	- git status
Clear the bash window
    - clear
Create a new file and add content to it
	- echo "Test Git Quick Start" >> start.txt
	this will create  file start.txt and it will add the content which is in double quotes
See the content of a file
	- cat start.txt
	this will show the content of the file.
Now if we do git status it will show that there is one uncommited file "red colour"
    - git add start.txt
	this puts the file in staging area
	- git commit -m "new file added"
	this puts file in commited area
	and now our working directory is clean
	- Now do a git push
	- git push origin master  -> this push will go to master branch
	
	to go back to previois directory
	- cd space ..
	- ls tells you all the file thats listed in the directory
	- ls -al tells you all the files that are hidden is included.
------------------------------------------------------------------------
When Empty project is getting created and you have to add it to the GIT
------------------------------------------------------------------------
- git init fresh-project       creates a fresh project in local directoryname
 go to that folder and add a file now
 - echo "New file" >> new.txt
 now if you do git status it will tell you a red marked file which you jsut now created.
 now do the same steps git add filename
 git commit -m "commit message"
--------------------------------
 how to create a git ignore file
 got to the project folder and type
 - touch .gitignore
 this is will create the ignore file.
 now type ls -al
 this will show the ignore file that was created.
 now add the extension which you want to ignore
 you need to add something like *.css to ignore  all the file with extension .css
 
 PENDING COMMITS
 
 Go to a Branch
 =================
 git checkout <branchname>
 
 Get rid of LocalChanges and get updated file from server
 ========================================================
 git fetch origin

=======================================================
git reset --hard origin/master
says: throw away all my staged and unstaged changes, forget everything on my current local branch and make it exactly the same as origin/master.
 git reset --hard origin/master 
//test
// test2
 
 Stash
=========================
Only when you dont want to commit a change list yet
but you might have something staged meaning you might have clicked "git add" and then you might have local unstaged changes also. and that's totally
fine.
just use command
"git stash"
and it will stash the changes and you will have a clean working directory.
if you want to see list of stash
"git stash list"
if you want to drop the stash you can say 
"git stash drop"
if you want to reapply git stash stuff just click git stash apply : it appplies the most recent stuff.

Adding a collaborator:
Go to the online repo and go to settings and add a collaborator.


Cloning a repo
========================================================================
git clone address => this will give you the link to the repo.
and obviously this will be the origin. as you are not creating any branch.

so till now MASTER (master remote)  -> Dev   (REMOTE)

					   Dev  (Local)
					   
					   Before making any changes do a Git Pull origin BRANCHNAME
					   Since we are in dev branch from where we cloned, we will do git pull origin {brnachname}, this will  give us the latest of code in remote dev repo.
					   Ideally doing this should show you the newly pulled files. (changes made my other to the Dev Branch.
					   at this point git status will show you that eveything is clean.
					   Now time to make some change here (local dev branch) my actual code will go here.
					   now git add --{filename}
					   git commit -m "my changes"
					   git push -u orgin master  (p.s: my current master is Dev located in server). but when this change will be pushed it will go to remote DEV Branch.
============================================
adding a branch
============================================
once you have all the code you can create a separate branch also, at the root folder you can simply say : git checkout -b "my new branch"

it will create a branch and switch it to that branch, now you can do git status and it will show you the branch you are in. :)

Switching a branch
Git checkout master
Git checkout my new branch
all this will keep on switching the branch

Now lets go to the a differet branch
git checkout my new branch
 and now lets add somefile here now remember we are in different branch which is not pushed to the server yet, now lets do
git add .
git commit ....
git push -u origin mybranch  // this push my code changes and since the branch is not laready existing it pushes the branch too.

doneeeeeeeeee, so now a new branch is created on server.
now in git you will have two branches you can see the file added in a new branch but no in the master.
so now if you go to your online account (collabaortor) accoutn you will see a button called "pull and merge request) so you need to click that add some comment and get done with it.

So now we need to crate a pull request for the owner (so more like we are telling ower please (pull our changes), meaning please merge these changes to main branch. This I might need to do, because I will push to dev.

Now role of Owner of project will come now becasuse he has the review the changes and merge it to the master branch.he branches..

Kindly note that when a branch is merged to main branch then that branch can be deleted because all its changes are already taken care. NOw we canc reate anotehr brnach and work. just saying..

now if you have deleted the temp branch, so go back again to master branch or dev branch and again create a branch and work on it, and do git pull. so get the latest changes.
But wait, when you go to master brnach you need to pull the master branch because your local master repo does nothave the local pull code, so now pull again before creating the new branch. the fle that you had added or manipulation you had done forwhich you crated 
the pull request which was merged by owner was all in your branch which is deleted after the pull request complete. so all this you need to do.

Now all the fun stuff will come into picture: 

SO now even though the new branch was deleted it still exists in the local system, so tis better to get rid of it. for nay confusion if you want to knwo which branch got merged, now you can run below command.
git branch --merged this will tell which branch is merged into master.

now lets delete the branch: git branch -d newbranch : now this will delete that new branch which was merged to the main form local repo. so finally we dont have tthis branch anymore.
we only have master clone in local repo 

=============================================
Merge Conflicts
=============================================
Suppose you modified some file and commited it, and someelse in th eman time modified a different file and commited and pushed it, and now if you go to push your own origial commit, 
 if you get the Upadtes are pending error message you can simple use git pull and it will work, since files that others have modififed is different so git pull and the git push and you should be all set.
But if same file is there you might get merge conflicts, and then you need to open the file with merge conflict and investigate on it.
=============================================
Forking a Repository
=============================================
Suppose we are not a collaborator in the repository and we want to work on that repository then we can fork the repository and it will create a separate branch to your git.
=====================================================================================================================================
Git Stash - When you are not ready to make a commit yet and you need to work in something else, then what to do with the local stash
=====================================================================================================================================
now you have some local changes which you have not even added yet. so jsut type git stash
now if you type git status you dirctory will be clean now, as you ont have any local changes. 

git stash pop (this is nice) so even if you have added something to staging area (git add .) that also will be brought to your local repo.
So your local changes not added/staged as well as your staged changes.

git stash pop --index -------- DO NOT retrieve your staged changes.

ALWAYS GET YOUR STASH CHNAGES BACK BEFORE MAING NAY CHANGES TO YOUR LOCAL Repository
=========================
Get Rid of Local Changes
=========================
	git reset --hard  : It will clean your local repo.














 


	
	
    

   
	
    
   
   
  
   
  
   